- name: Create manifests directory for temp configuration
  ansible.builtin.file:
    path: /tmp/cm
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: "0755"
  with_items: "{{ groups[group_name_master | default('master')] }}"
  run_once: true

- name: Create manifests directory on first master
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    owner: root
    group: root
    mode: "0644"
  when: ansible_hostname == hostvars[groups[group_name_master | default('master')][0]]['ansible_hostname']

- name: "Generate manifests"
  ansible.builtin.template:
    src: templates/cert-manager/{{ item }}.j2
    dest: /tmp/cm/{{ item  }}
    owner: root
    group: root
    mode: "0644"
  when: ansible_hostname == hostvars[groups[group_name_master | default('master')][0]]['ansible_hostname']
  with_items:
    - deployment.yaml
    - kustomization.yaml

- name: "Apply manifests"
  ansible.builtin.command: k3s kubectl apply -k /tmp/cm
  when: ansible_hostname == hostvars[groups[group_name_master | default('master')][0]]['ansible_hostname']

- name: Test Cert Manager namespace
  ansible.builtin.command: >-
    k3s kubectl -n cert-manager
  changed_when: false
  with_items: "{{ groups[group_name_master | default('master')] }}"
  run_once: true

- name: Wait for Cert Manager resources
  ansible.builtin.command: >-
    k3s kubectl wait {{ item.resource }}
    --namespace='cert-manager'
    {% if item.name | default(False) -%}{{ item.name }}{%- endif %}
    {% if item.selector | default(False) -%}--selector='{{ item.selector }}'{%- endif %}
    {% if item.condition | default(False) -%}{{ item.condition }}{%- endif %}
    --timeout='{{ cm_available_timeout }}'
  changed_when: false
  run_once: true
  with_items:
    - description: cert-manager-cainjector
      resource: deployment
      name: cert-manager-cainjector
      condition: --for condition=Available=True
    - description: cert-manager-cainjector
      resource: deployment
      name: cert-manager
      condition: --for condition=Available=True
    - description: cert-manager-cainjector
      resource: deployment
      name: cert-manager-webhook
      condition: --for condition=Available=True

  loop_control:
    label: "{{ item.description }}"